
from scapy.all import *
from scapy.contrib.bgp import *
import random
import logging
import time

logging.basicConfig(filename='codex_tlv_cyclone.log', level=logging.INFO, format='%(asctime)s - %(message)s')

def build_varied_tlvs():
    tlvs = []

    # Valid TLV: Multiprotocol Capability (Type 1)
    tlvs.append(bytes([2, 6, 1, 4, 0, 1, 0, 1]))

    # Invalid TLV: Wrong capability code
    tlvs.append(bytes([2, 3, 255, 1, 1]))

    # TLV: Unknown type with long length
    tlvs.append(bytes([127, 10] + [0x41]*10))

    # TLV: Short length, too little data
    tlvs.append(bytes([2, 5, 1, 4, 0]))

    # TLV: Capabilities declared but only 1 byte
    tlvs.append(bytes([2, 1, 1]))

    return tlvs

def send_multi_tlv_fuzz(dst_ip, dst_port=179):
    ip = IP(dst=dst_ip)
    src_port = RandShort()

    syn = TCP(sport=src_port, dport=dst_port, flags='S', seq=1000)
    syn_ack = sr1(ip/syn, timeout=3, verbose=0)

    if not syn_ack or not syn_ack.haslayer(TCP) or syn_ack[TCP].flags != 'SA':
        print("[!] No SYN-ACK — target may be filtered.")
        logging.info("No SYN-ACK received.")
        return

    ack = TCP(sport=src_port, dport=dst_port, flags='A', seq=syn_ack.ack, ack=syn_ack.seq + 1)
    send(ip/ack, verbose=0)

    tlvs = build_varied_tlvs()
    combined = b''.join(random.sample(tlvs, k=random.randint(2, len(tlvs))))

    open_hdr = bytes([
        4,                    # version
        0xFC, 0x00,           # my_as = 64512
        0x00, 0x5A,           # hold_time = 90
        1, 2, 3, 4,           # BGP ID
        len(combined)         # Total opt_param_len
    ]) + combined

    pkt = ip/TCP(sport=src_port, dport=dst_port, flags='PA', seq=ack.seq, ack=ack.ack)/BGPHeader(type=1)/Raw(load=open_hdr)
    print(f"[+] Sending Multi-TLV combo: {len(combined)} bytes")
    logging.info(f"Multi-TLV Packet (len={len(combined)}): {combined.hex()}")

    response = sr1(pkt, timeout=3, verbose=0)
    if response:
        print("[+] Response:", response.summary())
        logging.info(f"Response: {response.summary()}")
    else:
        print("[!] No response — possible crash or silent reject")
        logging.info("No response received.")

    time.sleep(1)

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: sudo python3 codex_tlv_cyclone.py <target_ip>")
        sys.exit(1)
    send_multi_tlv_fuzz(sys.argv[1])
